{"version":3,"sources":["Components/Context/AppContext.js","Components/ScatterGraph/ScatterInputFormItem.js","Components/ScatterGraph/ScatterInputForm.js","Components/ScatterGraph/ScatterInputGraph.js","Components/ScatterGraph/ScatterInputController.js","App.js","ContextWrapper.js","index.js"],"names":["AppContext","createContext","ScatterInputFormItem","index","value","useContext","data","setData","useState","x","setX","y","setY","inputFields","type","onChange","e","target","useEffect","dataCopy","map","input","ScatterInputForm","d","onClick","count","length","newData","z","ScatterInputGraph","dataPredict","setDataPredict","b0","setB0","b1","setB1","data1","setData1","dataPredict1","setDataPredict1","show","setShow","sumX","sumY","parseInt","meanX","meanY","variance","covariance","Math","pow","nb1","nb0","newDataPredict","axios","get","then","res","console","log","newDataPredict1","x0","x1","ScatterChart","width","height","margin","top","right","bottom","left","Tooltip","CartesianGrid","XAxis","dataKey","name","unit","YAxis","Scatter","fill","line","ScatterInputController","App","ContextWrapper","Provider","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.50f4bdad.chunk.js","sourcesContent":["import {createContext} from \"react\";\r\n\r\nlet AppContext = createContext();\r\n\r\nexport default AppContext;","import { useContext, useEffect, useState } from \"react\";\r\nimport AppContext from \"../Context/AppContext\";\r\n\r\nexport default function ScatterInputFormItem({ index }) {\r\n  let { value } = useContext(AppContext);\r\n  let [data, setData] = value;\r\n\r\n  let [x, setX] = useState(data[index].x);\r\n  let [y, setY] = useState(data[index].y);\r\n\r\n  let deleteItem = () => {\r\n    let newData = [...data];\r\n    delete newData[index];\r\n    setData(newData);\r\n  };\r\n\r\n  let inputFields = [\r\n    {\r\n      type: \"number\",\r\n      value: x,\r\n      onChange: (e) => setX(e.target.value)\r\n    },\r\n    {\r\n      type: \"number\",\r\n      value: y,\r\n      onChange: (e) => setY(e.target.value)\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    let dataCopy = [...data];\r\n    dataCopy[index].x = x;\r\n    dataCopy[index].y = y;\r\n    setData(dataCopy);\r\n  }, [x, y]);\r\n\r\n  return (\r\n    <tr>\r\n      {inputFields.map((input) => (\r\n        <td>\r\n          <input\r\n            type={input.type}\r\n            value={input.value}\r\n            onChange={input.onChange}\r\n          />\r\n        </td>\r\n      ))}\r\n      {/* for now delete doesn't work, will cause error items not found */}\r\n      {/* <button onClick={deleteItem}> Delete Item </button> */}\r\n    </tr>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport AppContext from \"../Context/AppContext\";\r\nimport ScatterInputFormItem from \"./ScatterInputFormItem\";\r\n\r\nexport default function ScatterInputForm() {\r\n  let { value } = useContext(AppContext);\r\n  let [data, setData] = value;\r\n\r\n  let addRow = () => {\r\n    let count = data.length;\r\n    let newData = [...data];\r\n    newData[count] = { x: 1, y: 1, z: 1 };\r\n    setData(newData);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <table>\r\n        <tr>\r\n          <td>\r\n            <p>x</p>\r\n          </td>\r\n\r\n          <td>\r\n            <p>y</p>\r\n          </td>\r\n        </tr>\r\n        {data.map((d, index) => (\r\n          <ScatterInputFormItem index={index} />\r\n        ))}\r\n      </table>\r\n      <button onClick={addRow}>Add row </button>\r\n    </>\r\n  );\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ScatterChart,\r\n  Scatter,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip\r\n} from \"recharts\";\r\nimport AppContext from \"../Context/AppContext\";\r\n\r\nexport default function ScatterInputGraph() {\r\n  let { value } = useContext(AppContext);\r\n  let [data, setData] = value;\r\n  let [dataPredict, setDataPredict] = useState([]);\r\n  let [b0, setB0] = useState(1);\r\n  let [b1, setB1] = useState(1);\r\n\r\n  // coefficient get from gradient descent\r\n  let [data1, setData1] = useState([]);\r\n  let [dataPredict1, setDataPredict1] = useState([]);\r\n  \r\n  // for hide red line\r\n  let [show, setShow] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let sumX = 0;\r\n    let sumY = 0;\r\n    let count = data.length;\r\n\r\n    data.map((d) => {\r\n      sumX += parseInt(d.x);\r\n      sumY += parseInt(d.y);\r\n    });\r\n\r\n    let meanX = sumX / count;\r\n    let meanY = sumY / count;\r\n\r\n    let variance = 0;\r\n    let covariance = 0;\r\n    data.map((d) => {\r\n      variance += Math.pow(d.x - meanX, 2);\r\n      covariance += (d.x - meanX) * (d.y - meanY);\r\n    });\r\n\r\n    let nb1 = covariance / variance;\r\n    let nb0 = meanY - b1 * meanX;\r\n\r\n    setB0(nb0);\r\n    setB1(nb1);\r\n    \r\n    // use value to predict data\r\n    let newDataPredict = [...dataPredict];\r\n\r\n\r\n    data.map((d, index) => {\r\n\r\n      newDataPredict[index] = {};\r\n      newDataPredict[index].x = d.x;\r\n      newDataPredict[index].y = nb0 + nb1 * d.x;\r\n    });\r\n\r\n    setDataPredict(newDataPredict);\r\n\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    // get data from google cloud\r\n    axios\r\n      .get(\"https://us-central1-api-project-70002766628.cloudfunctions.net/api-ml\")\r\n      .then((res) => {\r\n        console.log(res.data)\r\n        setData1(res.data)\r\n        });\r\n    let newDataPredict1 = [...dataPredict1];\r\n\r\n    data.map((d, index) => {\r\n\r\n      newDataPredict1[index] = {};\r\n      newDataPredict1[index].x = d.x;\r\n      newDataPredict1[index].y = parseInt(data1.x0) + parseInt(data1.x1) * d.x;\r\n    });\r\n    setDataPredict1(newDataPredict1)\r\n\r\n  }, [data])\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        Function: y = {b0} + {b1}x{\" \"}\r\n      </p>\r\n      <button onClick = {() => setShow(!show)}> Toggle hide/show red line</button>\r\n      <p> Initial coefficient from Google Cloud Function with gradient descent y = {data1.x0}  + {data1.x1} *x</p>\r\n      <p> If any data is changed, red line from Google Cloud will appear for initial dataset, but it's not really correct </p>\r\n      <ScatterChart\r\n        width={400}\r\n        height={400}\r\n        margin={{\r\n          top: 20,\r\n          right: 20,\r\n          bottom: 20,\r\n          left: 20\r\n        }}\r\n      >\r\n        <Tooltip />\r\n        <CartesianGrid />\r\n        <XAxis type=\"number\" dataKey=\"x\" name=\"stature\" unit=\"cm\" />\r\n        <YAxis type=\"number\" dataKey=\"y\" name=\"weight\" unit=\"kg\" />\r\n\r\n        <Scatter name=\"A school\" data={data} fill=\"#8884d8\" />\r\n        <Scatter name=\"Test\" data={dataPredict} fill=\"#82ca9d\" line />\r\n        {show && <Scatter name=\"Test\" data={dataPredict1} fill=\"#BB0231\" line />}\r\n      </ScatterChart>\r\n    </>\r\n  );\r\n}\r\n","import ScatterInputForm from \"./ScatterInputForm\";\r\nimport ScatterInputGraph from \"./ScatterInputGraph\";\r\n\r\nexport default function ScatterInputController() {\r\n  return (\r\n    <>\r\n      <p> Change x and y value below to see how the best fit line changes </p>\r\n      <ScatterInputForm />\r\n      <ScatterInputGraph />\r\n    </>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\nimport ScatterInputController from \"./Components/ScatterGraph/ScatterInputController\";\nimport \"./styles.css\";\n\nexport default function App() {\n\n  return (\n    <>\n      <h2> Linear Regression One Variable </h2>\n      <ScatterInputController />\n    </>\n  );\n}\n","import { useState } from \"react\";\r\nimport App from \"./App\";\r\nimport AppContext from \"./Components/Context/AppContext\";\r\n\r\nexport default function ContextWrapper() {\r\n  // all data will be from this lever\r\n  let [test, setTest] = useState(\"test\");\r\n\r\n  let [data, setData] = useState([\r\n    { x: 1, y: 2, z: 200 },\r\n    { x: 3, y: 7, z: 260 },\r\n    { x: 7, y: 11, z: 400 },\r\n    { x: 14, y: 23, z: 280 },\r\n    { x: 15, y: 25, z: 500 },\r\n    { x: 11, y: 21, z: 200 }\r\n  ]);\r\n\r\n  return (\r\n    <AppContext.Provider value={{ value: [data, setData] }}>\r\n      <App />\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport ContextWrapper from \"./ContextWrapper\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <ContextWrapper />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}